ARM GAS  C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"freertos.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.StartDefaultTask,"ax",%progbits
  16              		.align	1
  17              		.global	StartDefaultTask
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	StartDefaultTask:
  24              	.LFB9:
  25              		.file 1 "Core/Src/freertos.c"
   1:Core/Src/freertos.c **** /**
   2:Core/Src/freertos.c ****   ******************************************************************************
   3:Core/Src/freertos.c ****   * File Name          : freertos.c
   4:Core/Src/freertos.c ****   * Description        : Code for freertos applications
   5:Core/Src/freertos.c ****   ******************************************************************************
   6:Core/Src/freertos.c ****   * This notice applies to any and all portions of this file
   7:Core/Src/freertos.c ****   * that are not between comment pairs USER CODE BEGIN and
   8:Core/Src/freertos.c ****   * USER CODE END. Other portions of this file, whether 
   9:Core/Src/freertos.c ****   * inserted by the user or by software development tools
  10:Core/Src/freertos.c ****   * are owned by their respective copyright owners.
  11:Core/Src/freertos.c ****   *
  12:Core/Src/freertos.c ****   * Copyright (c) 2018 STMicroelectronics International N.V. 
  13:Core/Src/freertos.c ****   * All rights reserved.
  14:Core/Src/freertos.c ****   *
  15:Core/Src/freertos.c ****   * Redistribution and use in source and binary forms, with or without 
  16:Core/Src/freertos.c ****   * modification, are permitted, provided that the following conditions are met:
  17:Core/Src/freertos.c ****   *
  18:Core/Src/freertos.c ****   * 1. Redistribution of source code must retain the above copyright notice, 
  19:Core/Src/freertos.c ****   *    this list of conditions and the following disclaimer.
  20:Core/Src/freertos.c ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  21:Core/Src/freertos.c ****   *    this list of conditions and the following disclaimer in the documentation
  22:Core/Src/freertos.c ****   *    and/or other materials provided with the distribution.
  23:Core/Src/freertos.c ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  24:Core/Src/freertos.c ****   *    contributors to this software may be used to endorse or promote products 
  25:Core/Src/freertos.c ****   *    derived from this software without specific written permission.
  26:Core/Src/freertos.c ****   * 4. This software, including modifications and/or derivative works of this 
  27:Core/Src/freertos.c ****   *    software, must execute solely and exclusively on microcontroller or
  28:Core/Src/freertos.c ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  29:Core/Src/freertos.c ****   * 5. Redistribution and use of this software other than as permitted under 
  30:Core/Src/freertos.c ****   *    this license is void and will automatically terminate your rights under 
  31:Core/Src/freertos.c ****   *    this license. 
  32:Core/Src/freertos.c ****   *
  33:Core/Src/freertos.c ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
ARM GAS  C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s 			page 2


  34:Core/Src/freertos.c ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  35:Core/Src/freertos.c ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  36:Core/Src/freertos.c ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  37:Core/Src/freertos.c ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  38:Core/Src/freertos.c ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  39:Core/Src/freertos.c ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  40:Core/Src/freertos.c ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  41:Core/Src/freertos.c ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  42:Core/Src/freertos.c ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  43:Core/Src/freertos.c ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  44:Core/Src/freertos.c ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  45:Core/Src/freertos.c ****   *
  46:Core/Src/freertos.c ****   ******************************************************************************
  47:Core/Src/freertos.c ****   */
  48:Core/Src/freertos.c **** 
  49:Core/Src/freertos.c **** /* Includes ------------------------------------------------------------------*/
  50:Core/Src/freertos.c **** #include "FreeRTOS.h"
  51:Core/Src/freertos.c **** #include "task.h"
  52:Core/Src/freertos.c **** #include "cmsis_os.h"
  53:Core/Src/freertos.c **** 
  54:Core/Src/freertos.c **** /* USER CODE BEGIN Includes */     
  55:Core/Src/freertos.c **** #include "stdio.h"
  56:Core/Src/freertos.c **** #include "string.h"
  57:Core/Src/freertos.c **** /* USER CODE END Includes */
  58:Core/Src/freertos.c **** 
  59:Core/Src/freertos.c **** /* Variables -----------------------------------------------------------------*/
  60:Core/Src/freertos.c **** osThreadId defaultTaskHandle;
  61:Core/Src/freertos.c **** 
  62:Core/Src/freertos.c **** /* USER CODE BEGIN Variables */
  63:Core/Src/freertos.c **** osThreadId scanBSPATaskHandle;
  64:Core/Src/freertos.c **** osThreadId scanBSPBTaskHandle;
  65:Core/Src/freertos.c **** osThreadId scanUartsTaskHandle;
  66:Core/Src/freertos.c **** 
  67:Core/Src/freertos.c **** xSemaphoreHandle xScanBSPABoardSemaphore;
  68:Core/Src/freertos.c **** xSemaphoreHandle xScanBSPBBoardSemaphore;
  69:Core/Src/freertos.c **** xSemaphoreHandle xScanCoreBoardSemaphore;
  70:Core/Src/freertos.c **** 
  71:Core/Src/freertos.c **** extern uint8_t 	CoreBoardReceiveBuff[RXBUFFERSIZE];
  72:Core/Src/freertos.c **** extern uint8_t 	CoreBoardReceiveInfo[RXBUFFERSIZE];
  73:Core/Src/freertos.c **** extern uint8_t	CoreBoardRx_BufferLen;
  74:Core/Src/freertos.c **** extern uint8_t 	CoreBoardRx_InfoLen;
  75:Core/Src/freertos.c **** extern uint8_t 	BSPABoardReceiveBuff[RXBUFFERSIZE];
  76:Core/Src/freertos.c **** extern uint8_t 	BSPABoardReceiveInfo[RXBUFFERSIZE];
  77:Core/Src/freertos.c **** extern uint8_t	BSPABoardRx_BufferLen;
  78:Core/Src/freertos.c **** extern uint8_t 	BSPABoardRx_InfoLen;
  79:Core/Src/freertos.c **** extern uint8_t 	BSPBBoardReceiveBuff[RXBUFFERSIZE];
  80:Core/Src/freertos.c **** extern uint8_t 	BSPBBoardReceiveInfo[RXBUFFERSIZE];
  81:Core/Src/freertos.c **** extern uint8_t	BSPBBoardRx_BufferLen;
  82:Core/Src/freertos.c **** extern uint8_t 	BSPBBoardRx_InfoLen;
  83:Core/Src/freertos.c **** 
  84:Core/Src/freertos.c **** portBASE_TYPE tReturn;
  85:Core/Src/freertos.c **** /* USER CODE END Variables */
  86:Core/Src/freertos.c **** 
  87:Core/Src/freertos.c **** /* Function prototypes -------------------------------------------------------*/
  88:Core/Src/freertos.c **** void StartDefaultTask(void const * argument);
  89:Core/Src/freertos.c **** 
  90:Core/Src/freertos.c **** void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */
ARM GAS  C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s 			page 3


  91:Core/Src/freertos.c **** 
  92:Core/Src/freertos.c **** /* USER CODE BEGIN FunctionPrototypes */
  93:Core/Src/freertos.c **** void vApplicationIdleHook(void);
  94:Core/Src/freertos.c **** void StartScanBSPATask(void const * argument);
  95:Core/Src/freertos.c **** void StartScanBSPBTask(void const * argument);
  96:Core/Src/freertos.c **** void StartScanBSPCTask(void const * argument);
  97:Core/Src/freertos.c **** void StartScanUsartsTask(void const * argument);
  98:Core/Src/freertos.c **** 
  99:Core/Src/freertos.c **** 
 100:Core/Src/freertos.c **** /* USER CODE END FunctionPrototypes */
 101:Core/Src/freertos.c **** 
 102:Core/Src/freertos.c **** /* Hook prototypes */
 103:Core/Src/freertos.c **** 
 104:Core/Src/freertos.c **** /* Init FreeRTOS */
 105:Core/Src/freertos.c **** 
 106:Core/Src/freertos.c **** void MX_FREERTOS_Init(void) {
 107:Core/Src/freertos.c ****   /* USER CODE BEGIN Init */
 108:Core/Src/freertos.c ****        
 109:Core/Src/freertos.c ****   /* USER CODE END Init */
 110:Core/Src/freertos.c **** 
 111:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 112:Core/Src/freertos.c ****   /* add mutexes, ... */
 113:Core/Src/freertos.c ****   /* USER CODE END RTOS_MUTEX */
 114:Core/Src/freertos.c **** 
 115:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 116:Core/Src/freertos.c ****   /* add semaphores, ... */
 117:Core/Src/freertos.c ****   xScanCoreBoardSemaphore = xSemaphoreCreateBinary();
 118:Core/Src/freertos.c ****   xScanBSPABoardSemaphore = xSemaphoreCreateBinary();
 119:Core/Src/freertos.c ****   xScanBSPBBoardSemaphore = xSemaphoreCreateBinary();
 120:Core/Src/freertos.c ****   /* USER CODE END RTOS_SEMAPHORES */
 121:Core/Src/freertos.c **** 
 122:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 123:Core/Src/freertos.c ****   /* start timers, add new ones, ... */
 124:Core/Src/freertos.c ****   /* USER CODE END RTOS_TIMERS */
 125:Core/Src/freertos.c **** 
 126:Core/Src/freertos.c ****   /* Create the thread(s) */
 127:Core/Src/freertos.c ****   /* definition and creation of defaultTask */
 128:Core/Src/freertos.c ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 64);
 129:Core/Src/freertos.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 130:Core/Src/freertos.c **** 
 131:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_THREADS */
 132:Core/Src/freertos.c ****   /* add threads, ... */
 133:Core/Src/freertos.c ****   /*
 134:Core/Src/freertos.c ****   tReturn = xTaskCreate((TaskFunction_t)StartScanBSPATask,
 135:Core/Src/freertos.c ****   				(const char *)"scanBSPATask",
 136:Core/Src/freertos.c ****   				(uint16_t    )128,
 137:Core/Src/freertos.c ****   				(void *		 )NULL,
 138:Core/Src/freertos.c ****   				(UBaseType_t )0,
 139:Core/Src/freertos.c ****   				(TaskHandle_t*)&scanBSPATaskHandle);
 140:Core/Src/freertos.c ****   if(pdPASS == tReturn)
 141:Core/Src/freertos.c ****   {
 142:Core/Src/freertos.c **** 	printf(" Scan BSPA Task Create OK!\r\n");
 143:Core/Src/freertos.c ****   }
 144:Core/Src/freertos.c ****   
 145:Core/Src/freertos.c ****   tReturn = xTaskCreate((TaskFunction_t)StartScanBSPBTask,
 146:Core/Src/freertos.c ****   				(const char *)"scanBSPBTask",
 147:Core/Src/freertos.c ****   				(uint16_t    )64,
ARM GAS  C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s 			page 4


 148:Core/Src/freertos.c ****   				(void *		 )NULL,
 149:Core/Src/freertos.c ****   				(UBaseType_t )1,
 150:Core/Src/freertos.c ****   				(TaskHandle_t*)&scanBSPBTaskHandle);
 151:Core/Src/freertos.c ****    if(pdPASS == tReturn)
 152:Core/Src/freertos.c ****   {
 153:Core/Src/freertos.c **** 	printf(" Scan BSPB Task Create OK! \r\n");
 154:Core/Src/freertos.c ****   }
 155:Core/Src/freertos.c ****   */
 156:Core/Src/freertos.c ****   
 157:Core/Src/freertos.c **** // tReturn = xTaskCreate((TaskFunction_t)StartScanUsartsTask,
 158:Core/Src/freertos.c **** // 				(const char *)"scanUartsTask",
 159:Core/Src/freertos.c **** // 				(uint16_t    )256,
 160:Core/Src/freertos.c **** // 				(void *		 )NULL,
 161:Core/Src/freertos.c **** // 				(UBaseType_t )1,
 162:Core/Src/freertos.c **** // 				(TaskHandle_t*)&scanUartsTaskHandle);
 163:Core/Src/freertos.c **** // if(pdPASS == tReturn)
 164:Core/Src/freertos.c **** // {
 165:Core/Src/freertos.c **** //	printf(" Scan Core Board Task Create OK! \r\n");
 166:Core/Src/freertos.c **** //}
 167:Core/Src/freertos.c ****   
 168:Core/Src/freertos.c ****   /*
 169:Core/Src/freertos.c ****   osThreadDef(scanBSPATask,StartScanBSPATask,osPriorityAboveNormal,0,128);
 170:Core/Src/freertos.c ****   scanBSPATaskHandle = osThreadCreate(osThread(scanBSPATask), NULL);
 171:Core/Src/freertos.c ****   
 172:Core/Src/freertos.c ****   osThreadDef(scanBSPBTask,StartScanBSPBTask,osPriorityAboveNormal,0,128);
 173:Core/Src/freertos.c ****   scanBSPBTaskHandle = osThreadCreate(osThread(scanBSPBTask), NULL);
 174:Core/Src/freertos.c ****   
 175:Core/Src/freertos.c ****   osThreadDef(scanCoreBoardTask, StartScanCoreBoardTask, osPriorityHigh,0,128);
 176:Core/Src/freertos.c ****   scanCoreBoardTaskHandle = osThreadCreate(osThread(scanCoreBoardTask), NULL);
 177:Core/Src/freertos.c ****   */
 178:Core/Src/freertos.c ****   /* USER CODE END RTOS_THREADS */
 179:Core/Src/freertos.c **** 
 180:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 181:Core/Src/freertos.c ****   /* add queues, ... */
 182:Core/Src/freertos.c ****   /* USER CODE END RTOS_QUEUES */
 183:Core/Src/freertos.c **** }
 184:Core/Src/freertos.c **** 
 185:Core/Src/freertos.c **** /* StartDefaultTask function */
 186:Core/Src/freertos.c **** void StartDefaultTask(void const * argument)
 187:Core/Src/freertos.c **** {
  26              		.loc 1 187 0
  27              		.cfi_startproc
  28              		@ Volatile: function does not return.
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 08B5     		push	{r3, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
  37              	.LVL1:
  38              	.L2:
 188:Core/Src/freertos.c **** 
 189:Core/Src/freertos.c ****   /* USER CODE BEGIN StartDefaultTask */
 190:Core/Src/freertos.c ****   /* Infinite loop */
 191:Core/Src/freertos.c ****   for(;;)
ARM GAS  C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s 			page 5


 192:Core/Src/freertos.c ****   {
 193:Core/Src/freertos.c ****     osDelay(500);
  39              		.loc 1 193 0 discriminator 1
  40 0002 4FF4FA70 		mov	r0, #500
  41 0006 FFF7FEFF 		bl	osDelay
  42              	.LVL2:
 194:Core/Src/freertos.c **** 	printf("Welcome to USE FreeRTOS \r\n");
  43              		.loc 1 194 0 discriminator 1
  44 000a 0248     		ldr	r0, .L4
  45 000c FFF7FEFF 		bl	puts
  46              	.LVL3:
  47 0010 F7E7     		b	.L2
  48              	.L5:
  49 0012 00BF     		.align	2
  50              	.L4:
  51 0014 00000000 		.word	.LC2
  52              		.cfi_endproc
  53              	.LFE9:
  55              		.section	.text.MX_FREERTOS_Init,"ax",%progbits
  56              		.align	1
  57              		.global	MX_FREERTOS_Init
  58              		.syntax unified
  59              		.thumb
  60              		.thumb_func
  61              		.fpu softvfp
  63              	MX_FREERTOS_Init:
  64              	.LFB8:
 106:Core/Src/freertos.c ****   /* USER CODE BEGIN Init */
  65              		.loc 1 106 0
  66              		.cfi_startproc
  67              		@ args = 0, pretend = 0, frame = 24
  68              		@ frame_needed = 0, uses_anonymous_args = 0
  69 0000 30B5     		push	{r4, r5, lr}
  70              	.LCFI1:
  71              		.cfi_def_cfa_offset 12
  72              		.cfi_offset 4, -12
  73              		.cfi_offset 5, -8
  74              		.cfi_offset 14, -4
  75 0002 87B0     		sub	sp, sp, #28
  76              	.LCFI2:
  77              		.cfi_def_cfa_offset 40
 117:Core/Src/freertos.c ****   xScanBSPABoardSemaphore = xSemaphoreCreateBinary();
  78              		.loc 1 117 0
  79 0004 0322     		movs	r2, #3
  80 0006 0021     		movs	r1, #0
  81 0008 0120     		movs	r0, #1
  82 000a FFF7FEFF 		bl	xQueueGenericCreate
  83              	.LVL4:
  84 000e 0F4B     		ldr	r3, .L8
  85 0010 1860     		str	r0, [r3]
 118:Core/Src/freertos.c ****   xScanBSPBBoardSemaphore = xSemaphoreCreateBinary();
  86              		.loc 1 118 0
  87 0012 0322     		movs	r2, #3
  88 0014 0021     		movs	r1, #0
  89 0016 0120     		movs	r0, #1
  90 0018 FFF7FEFF 		bl	xQueueGenericCreate
  91              	.LVL5:
ARM GAS  C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s 			page 6


  92 001c 0C4B     		ldr	r3, .L8+4
  93 001e 1860     		str	r0, [r3]
 119:Core/Src/freertos.c ****   /* USER CODE END RTOS_SEMAPHORES */
  94              		.loc 1 119 0
  95 0020 0322     		movs	r2, #3
  96 0022 0021     		movs	r1, #0
  97 0024 0120     		movs	r0, #1
  98 0026 FFF7FEFF 		bl	xQueueGenericCreate
  99              	.LVL6:
 100 002a 0A4B     		ldr	r3, .L8+8
 101 002c 1860     		str	r0, [r3]
 128:Core/Src/freertos.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 102              		.loc 1 128 0
 103 002e 01AC     		add	r4, sp, #4
 104 0030 094D     		ldr	r5, .L8+12
 105 0032 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 106 0034 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 107 0036 2B68     		ldr	r3, [r5]
 108 0038 2360     		str	r3, [r4]
 129:Core/Src/freertos.c **** 
 109              		.loc 1 129 0
 110 003a 0021     		movs	r1, #0
 111 003c 01A8     		add	r0, sp, #4
 112 003e FFF7FEFF 		bl	osThreadCreate
 113              	.LVL7:
 114 0042 064B     		ldr	r3, .L8+16
 115 0044 1860     		str	r0, [r3]
 183:Core/Src/freertos.c **** 
 116              		.loc 1 183 0
 117 0046 07B0     		add	sp, sp, #28
 118              	.LCFI3:
 119              		.cfi_def_cfa_offset 12
 120              		@ sp needed
 121 0048 30BD     		pop	{r4, r5, pc}
 122              	.L9:
 123 004a 00BF     		.align	2
 124              	.L8:
 125 004c 00000000 		.word	xScanCoreBoardSemaphore
 126 0050 00000000 		.word	xScanBSPABoardSemaphore
 127 0054 00000000 		.word	xScanBSPBBoardSemaphore
 128 0058 00000000 		.word	.LANCHOR0
 129 005c 00000000 		.word	defaultTaskHandle
 130              		.cfi_endproc
 131              	.LFE8:
 133              		.section	.text.vApplicationIdleHook,"ax",%progbits
 134              		.align	1
 135              		.global	vApplicationIdleHook
 136              		.syntax unified
 137              		.thumb
 138              		.thumb_func
 139              		.fpu softvfp
 141              	vApplicationIdleHook:
 142              	.LFB10:
 195:Core/Src/freertos.c ****   }
 196:Core/Src/freertos.c ****   /* USER CODE END StartDefaultTask */
 197:Core/Src/freertos.c **** }
 198:Core/Src/freertos.c **** 
ARM GAS  C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s 			page 7


 199:Core/Src/freertos.c **** /* USER CODE BEGIN Application */
 200:Core/Src/freertos.c **** void vApplicationIdleHook(void)
 201:Core/Src/freertos.c **** {
 143              		.loc 1 201 0
 144              		.cfi_startproc
 145              		@ args = 0, pretend = 0, frame = 0
 146              		@ frame_needed = 0, uses_anonymous_args = 0
 147 0000 08B5     		push	{r3, lr}
 148              	.LCFI4:
 149              		.cfi_def_cfa_offset 8
 150              		.cfi_offset 3, -8
 151              		.cfi_offset 14, -4
 202:Core/Src/freertos.c **** 	//for(;;)
 203:Core/Src/freertos.c **** 	//{
 204:Core/Src/freertos.c **** 		printf("Idle Hook Function\r\n");
 152              		.loc 1 204 0
 153 0002 0248     		ldr	r0, .L12
 154 0004 FFF7FEFF 		bl	puts
 155              	.LVL8:
 205:Core/Src/freertos.c **** 		//
 206:Core/Src/freertos.c **** 	//}
 207:Core/Src/freertos.c **** }
 156              		.loc 1 207 0
 157 0008 08BD     		pop	{r3, pc}
 158              	.L13:
 159 000a 00BF     		.align	2
 160              	.L12:
 161 000c 00000000 		.word	.LC4
 162              		.cfi_endproc
 163              	.LFE10:
 165              		.section	.text.StartScanBSPATask,"ax",%progbits
 166              		.align	1
 167              		.global	StartScanBSPATask
 168              		.syntax unified
 169              		.thumb
 170              		.thumb_func
 171              		.fpu softvfp
 173              	StartScanBSPATask:
 174              	.LFB11:
 208:Core/Src/freertos.c **** void StartScanBSPATask(void const * argument)
 209:Core/Src/freertos.c **** {
 175              		.loc 1 209 0
 176              		.cfi_startproc
 177              		@ Volatile: function does not return.
 178              		@ args = 0, pretend = 0, frame = 0
 179              		@ frame_needed = 0, uses_anonymous_args = 0
 180              	.LVL9:
 181 0000 08B5     		push	{r3, lr}
 182              	.LCFI5:
 183              		.cfi_def_cfa_offset 8
 184              		.cfi_offset 3, -8
 185              		.cfi_offset 14, -4
 186              	.LVL10:
 187              	.L15:
 210:Core/Src/freertos.c **** 	for(;;)
 211:Core/Src/freertos.c **** 	{
 212:Core/Src/freertos.c **** 		vTaskDelay(500);
ARM GAS  C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s 			page 8


 188              		.loc 1 212 0 discriminator 1
 189 0002 4FF4FA70 		mov	r0, #500
 190 0006 FFF7FEFF 		bl	vTaskDelay
 191              	.LVL11:
 213:Core/Src/freertos.c **** 		printf("ScanBSPA \r\n");
 192              		.loc 1 213 0 discriminator 1
 193 000a 0248     		ldr	r0, .L17
 194 000c FFF7FEFF 		bl	puts
 195              	.LVL12:
 196 0010 F7E7     		b	.L15
 197              	.L18:
 198 0012 00BF     		.align	2
 199              	.L17:
 200 0014 00000000 		.word	.LC5
 201              		.cfi_endproc
 202              	.LFE11:
 204              		.section	.text.StartScanBSPBTask,"ax",%progbits
 205              		.align	1
 206              		.global	StartScanBSPBTask
 207              		.syntax unified
 208              		.thumb
 209              		.thumb_func
 210              		.fpu softvfp
 212              	StartScanBSPBTask:
 213              	.LFB12:
 214:Core/Src/freertos.c **** 	}
 215:Core/Src/freertos.c **** }
 216:Core/Src/freertos.c **** void StartScanBSPBTask(void const * argument)
 217:Core/Src/freertos.c **** {
 214              		.loc 1 217 0
 215              		.cfi_startproc
 216              		@ Volatile: function does not return.
 217              		@ args = 0, pretend = 0, frame = 0
 218              		@ frame_needed = 0, uses_anonymous_args = 0
 219              	.LVL13:
 220 0000 08B5     		push	{r3, lr}
 221              	.LCFI6:
 222              		.cfi_def_cfa_offset 8
 223              		.cfi_offset 3, -8
 224              		.cfi_offset 14, -4
 225              	.LVL14:
 226              	.L20:
 218:Core/Src/freertos.c **** 	for(;;)
 219:Core/Src/freertos.c **** 	{
 220:Core/Src/freertos.c **** 		vTaskDelay(500);
 227              		.loc 1 220 0 discriminator 1
 228 0002 4FF4FA70 		mov	r0, #500
 229 0006 FFF7FEFF 		bl	vTaskDelay
 230              	.LVL15:
 221:Core/Src/freertos.c **** 		printf("ScanBSPB \r\n");
 231              		.loc 1 221 0 discriminator 1
 232 000a 0248     		ldr	r0, .L22
 233 000c FFF7FEFF 		bl	puts
 234              	.LVL16:
 235 0010 F7E7     		b	.L20
 236              	.L23:
 237 0012 00BF     		.align	2
ARM GAS  C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s 			page 9


 238              	.L22:
 239 0014 00000000 		.word	.LC6
 240              		.cfi_endproc
 241              	.LFE12:
 243              		.section	.text.StartScanUsartsTask,"ax",%progbits
 244              		.align	1
 245              		.global	StartScanUsartsTask
 246              		.syntax unified
 247              		.thumb
 248              		.thumb_func
 249              		.fpu softvfp
 251              	StartScanUsartsTask:
 252              	.LFB13:
 222:Core/Src/freertos.c **** 	}
 223:Core/Src/freertos.c **** }
 224:Core/Src/freertos.c **** void StartScanUsartsTask(void const * argument)
 225:Core/Src/freertos.c **** {
 253              		.loc 1 225 0
 254              		.cfi_startproc
 255              		@ args = 0, pretend = 0, frame = 0
 256              		@ frame_needed = 0, uses_anonymous_args = 0
 257              	.LVL17:
 258 0000 70B5     		push	{r4, r5, r6, lr}
 259              	.LCFI7:
 260              		.cfi_def_cfa_offset 16
 261              		.cfi_offset 4, -16
 262              		.cfi_offset 5, -12
 263              		.cfi_offset 6, -8
 264              		.cfi_offset 14, -4
 265              	.LVL18:
 226:Core/Src/freertos.c **** 	BaseType_t err = pdFALSE;
 227:Core/Src/freertos.c **** 	xSemaphoreTake(xScanBSPABoardSemaphore, 0);
 266              		.loc 1 227 0
 267 0002 0023     		movs	r3, #0
 268 0004 1A46     		mov	r2, r3
 269 0006 1946     		mov	r1, r3
 270 0008 3248     		ldr	r0, .L34
 271              	.LVL19:
 272 000a 0068     		ldr	r0, [r0]
 273 000c FFF7FEFF 		bl	xQueueGenericReceive
 274              	.LVL20:
 228:Core/Src/freertos.c **** 	xSemaphoreTake(xScanBSPBBoardSemaphore, 0);
 275              		.loc 1 228 0
 276 0010 0023     		movs	r3, #0
 277 0012 1A46     		mov	r2, r3
 278 0014 1946     		mov	r1, r3
 279 0016 3048     		ldr	r0, .L34+4
 280 0018 0068     		ldr	r0, [r0]
 281 001a FFF7FEFF 		bl	xQueueGenericReceive
 282              	.LVL21:
 229:Core/Src/freertos.c **** 	xSemaphoreTake(xScanCoreBoardSemaphore, 0);
 283              		.loc 1 229 0
 284 001e 0023     		movs	r3, #0
 285 0020 1A46     		mov	r2, r3
 286 0022 1946     		mov	r1, r3
 287 0024 2D48     		ldr	r0, .L34+8
 288 0026 0068     		ldr	r0, [r0]
ARM GAS  C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s 			page 10


 289 0028 FFF7FEFF 		bl	xQueueGenericReceive
 290              	.LVL22:
 291 002c 1EE0     		b	.L28
 292              	.LVL23:
 293              	.L32:
 230:Core/Src/freertos.c **** 	for(;;)
 231:Core/Src/freertos.c **** 	{
 232:Core/Src/freertos.c **** 		err = xSemaphoreTake(xScanBSPABoardSemaphore, 5);
 233:Core/Src/freertos.c **** 		if(err == pdTRUE)
 234:Core/Src/freertos.c **** 		{
 235:Core/Src/freertos.c **** 			
 236:Core/Src/freertos.c **** 			printf("BSPABoardRx_Len = %03d\n %s\r\n",BSPABoardRx_InfoLen,BSPABoardReceiveInfo);
 294              		.loc 1 236 0
 295 002e 2C4D     		ldr	r5, .L34+12
 296 0030 2C4C     		ldr	r4, .L34+16
 297 0032 2A46     		mov	r2, r5
 298 0034 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 299 0036 2C48     		ldr	r0, .L34+20
 300              	.LVL24:
 301 0038 FFF7FEFF 		bl	printf
 302              	.LVL25:
 237:Core/Src/freertos.c **** 			memset(BSPABoardReceiveInfo,0x00,BSPABoardRx_InfoLen);
 303              		.loc 1 237 0
 304 003c 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 305 003e 0021     		movs	r1, #0
 306 0040 2846     		mov	r0, r5
 307 0042 FFF7FEFF 		bl	memset
 308              	.LVL26:
 238:Core/Src/freertos.c **** 			BSPABoardRx_InfoLen = 0;
 309              		.loc 1 238 0
 310 0046 0023     		movs	r3, #0
 311 0048 2370     		strb	r3, [r4]
 312 004a 18E0     		b	.L25
 313              	.LVL27:
 314              	.L33:
 239:Core/Src/freertos.c **** 			
 240:Core/Src/freertos.c **** 		}
 241:Core/Src/freertos.c **** 		
 242:Core/Src/freertos.c **** 		err = xSemaphoreTake(xScanBSPBBoardSemaphore, 5);
 243:Core/Src/freertos.c **** 		if(err == pdTRUE)
 244:Core/Src/freertos.c **** 		{
 245:Core/Src/freertos.c **** 			printf("BSPBBoardRx_Len = %03d\n %s\r\n",BSPBBoardRx_InfoLen,BSPBBoardReceiveInfo);
 315              		.loc 1 245 0
 316 004c 274D     		ldr	r5, .L34+24
 317 004e 284C     		ldr	r4, .L34+28
 318 0050 2A46     		mov	r2, r5
 319 0052 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 320 0054 2748     		ldr	r0, .L34+32
 321              	.LVL28:
 322 0056 FFF7FEFF 		bl	printf
 323              	.LVL29:
 246:Core/Src/freertos.c **** 			memset(BSPBBoardReceiveInfo,0x00,BSPBBoardRx_InfoLen);
 324              		.loc 1 246 0
 325 005a 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 326 005c 0021     		movs	r1, #0
 327 005e 2846     		mov	r0, r5
 328 0060 FFF7FEFF 		bl	memset
ARM GAS  C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s 			page 11


 329              	.LVL30:
 247:Core/Src/freertos.c **** 			BSPBBoardRx_InfoLen = 0;
 330              		.loc 1 247 0
 331 0064 0023     		movs	r3, #0
 332 0066 2370     		strb	r3, [r4]
 333 0068 12E0     		b	.L26
 334              	.LVL31:
 335              	.L27:
 248:Core/Src/freertos.c **** 		}
 249:Core/Src/freertos.c **** 		
 250:Core/Src/freertos.c **** 		err = xSemaphoreTake(xScanCoreBoardSemaphore, 5);//portMAX_DELAY);
 251:Core/Src/freertos.c **** 		if(err == pdTRUE)
 252:Core/Src/freertos.c **** 		{
 253:Core/Src/freertos.c **** 			printf("CoreBoardRx_Len = %03d\n %s\r\n",CoreBoardRx_InfoLen,CoreBoardReceiveInfo);
 254:Core/Src/freertos.c **** 			memset(CoreBoardReceiveInfo,0x00,CoreBoardRx_InfoLen);
 255:Core/Src/freertos.c **** 			CoreBoardRx_InfoLen = 0;
 256:Core/Src/freertos.c **** 		}
 257:Core/Src/freertos.c **** 
 258:Core/Src/freertos.c **** 		if(err == pdFALSE)
 336              		.loc 1 258 0
 337 006a 54B3     		cbz	r4, .L31
 338              	.LVL32:
 339              	.L28:
 232:Core/Src/freertos.c **** 		if(err == pdTRUE)
 340              		.loc 1 232 0
 341 006c 0023     		movs	r3, #0
 342 006e 0522     		movs	r2, #5
 343 0070 1946     		mov	r1, r3
 344 0072 1848     		ldr	r0, .L34
 345 0074 0068     		ldr	r0, [r0]
 346 0076 FFF7FEFF 		bl	xQueueGenericReceive
 347              	.LVL33:
 233:Core/Src/freertos.c **** 		{
 348              		.loc 1 233 0
 349 007a 0128     		cmp	r0, #1
 350 007c D7D0     		beq	.L32
 351              	.LVL34:
 352              	.L25:
 242:Core/Src/freertos.c **** 		if(err == pdTRUE)
 353              		.loc 1 242 0
 354 007e 0023     		movs	r3, #0
 355 0080 0522     		movs	r2, #5
 356 0082 1946     		mov	r1, r3
 357 0084 1448     		ldr	r0, .L34+4
 358 0086 0068     		ldr	r0, [r0]
 359 0088 FFF7FEFF 		bl	xQueueGenericReceive
 360              	.LVL35:
 243:Core/Src/freertos.c **** 		{
 361              		.loc 1 243 0
 362 008c 0128     		cmp	r0, #1
 363 008e DDD0     		beq	.L33
 364              	.LVL36:
 365              	.L26:
 250:Core/Src/freertos.c **** 		if(err == pdTRUE)
 366              		.loc 1 250 0
 367 0090 0023     		movs	r3, #0
 368 0092 0522     		movs	r2, #5
ARM GAS  C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s 			page 12


 369 0094 1946     		mov	r1, r3
 370 0096 1148     		ldr	r0, .L34+8
 371 0098 0068     		ldr	r0, [r0]
 372 009a FFF7FEFF 		bl	xQueueGenericReceive
 373              	.LVL37:
 374 009e 0446     		mov	r4, r0
 375              	.LVL38:
 251:Core/Src/freertos.c **** 		{
 376              		.loc 1 251 0
 377 00a0 0128     		cmp	r0, #1
 378 00a2 E2D1     		bne	.L27
 253:Core/Src/freertos.c **** 			memset(CoreBoardReceiveInfo,0x00,CoreBoardRx_InfoLen);
 379              		.loc 1 253 0
 380 00a4 144E     		ldr	r6, .L34+36
 381 00a6 154D     		ldr	r5, .L34+40
 382 00a8 3246     		mov	r2, r6
 383 00aa 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 384 00ac 1448     		ldr	r0, .L34+44
 385              	.LVL39:
 386 00ae FFF7FEFF 		bl	printf
 387              	.LVL40:
 254:Core/Src/freertos.c **** 			CoreBoardRx_InfoLen = 0;
 388              		.loc 1 254 0
 389 00b2 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 390 00b4 0021     		movs	r1, #0
 391 00b6 3046     		mov	r0, r6
 392 00b8 FFF7FEFF 		bl	memset
 393              	.LVL41:
 255:Core/Src/freertos.c **** 		}
 394              		.loc 1 255 0
 395 00bc 0023     		movs	r3, #0
 396 00be 2B70     		strb	r3, [r5]
 397 00c0 D3E7     		b	.L27
 398              	.L31:
 259:Core/Src/freertos.c **** 		{
 260:Core/Src/freertos.c **** 			vTaskDelay(500);
 399              		.loc 1 260 0
 400 00c2 4FF4FA70 		mov	r0, #500
 401 00c6 FFF7FEFF 		bl	vTaskDelay
 402              	.LVL42:
 261:Core/Src/freertos.c **** 			printf("Scan Uarts Task\r\n");
 403              		.loc 1 261 0
 404 00ca 0E48     		ldr	r0, .L34+48
 405 00cc FFF7FEFF 		bl	puts
 406              	.LVL43:
 407 00d0 CCE7     		b	.L28
 408              	.L35:
 409 00d2 00BF     		.align	2
 410              	.L34:
 411 00d4 00000000 		.word	xScanBSPABoardSemaphore
 412 00d8 00000000 		.word	xScanBSPBBoardSemaphore
 413 00dc 00000000 		.word	xScanCoreBoardSemaphore
 414 00e0 00000000 		.word	BSPABoardReceiveInfo
 415 00e4 00000000 		.word	BSPABoardRx_InfoLen
 416 00e8 00000000 		.word	.LC7
 417 00ec 00000000 		.word	BSPBBoardReceiveInfo
 418 00f0 00000000 		.word	BSPBBoardRx_InfoLen
ARM GAS  C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s 			page 13


 419 00f4 20000000 		.word	.LC8
 420 00f8 00000000 		.word	CoreBoardReceiveInfo
 421 00fc 00000000 		.word	CoreBoardRx_InfoLen
 422 0100 40000000 		.word	.LC9
 423 0104 60000000 		.word	.LC10
 424              		.cfi_endproc
 425              	.LFE13:
 427              		.comm	tReturn,4,4
 428              		.comm	xScanCoreBoardSemaphore,4,4
 429              		.comm	xScanBSPBBoardSemaphore,4,4
 430              		.comm	xScanBSPABoardSemaphore,4,4
 431              		.comm	scanUartsTaskHandle,4,4
 432              		.comm	scanBSPBTaskHandle,4,4
 433              		.comm	scanBSPATaskHandle,4,4
 434              		.comm	defaultTaskHandle,4,4
 435              		.section	.rodata
 436              		.align	2
 437              		.set	.LANCHOR0,. + 0
 438              	.LC3:
 439 0000 00000000 		.word	.LC0
 440 0004 00000000 		.word	StartDefaultTask
 441 0008 0000     		.short	0
 442 000a 0000     		.space	2
 443 000c 00000000 		.word	0
 444 0010 40000000 		.word	64
 445              		.section	.rodata.StartDefaultTask.str1.4,"aMS",%progbits,1
 446              		.align	2
 447              	.LC2:
 448 0000 57656C63 		.ascii	"Welcome to USE FreeRTOS \015\000"
 448      6F6D6520 
 448      746F2055 
 448      53452046 
 448      72656552 
 449              		.section	.rodata.StartScanBSPATask.str1.4,"aMS",%progbits,1
 450              		.align	2
 451              	.LC5:
 452 0000 5363616E 		.ascii	"ScanBSPA \015\000"
 452      42535041 
 452      200D00
 453              		.section	.rodata.StartScanBSPBTask.str1.4,"aMS",%progbits,1
 454              		.align	2
 455              	.LC6:
 456 0000 5363616E 		.ascii	"ScanBSPB \015\000"
 456      42535042 
 456      200D00
 457              		.section	.rodata.StartScanUsartsTask.str1.4,"aMS",%progbits,1
 458              		.align	2
 459              	.LC7:
 460 0000 42535041 		.ascii	"BSPABoardRx_Len = %03d\012 %s\015\012\000"
 460      426F6172 
 460      6452785F 
 460      4C656E20 
 460      3D202530 
 461 001d 000000   		.space	3
 462              	.LC8:
 463 0020 42535042 		.ascii	"BSPBBoardRx_Len = %03d\012 %s\015\012\000"
 463      426F6172 
ARM GAS  C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s 			page 14


 463      6452785F 
 463      4C656E20 
 463      3D202530 
 464 003d 000000   		.space	3
 465              	.LC9:
 466 0040 436F7265 		.ascii	"CoreBoardRx_Len = %03d\012 %s\015\012\000"
 466      426F6172 
 466      6452785F 
 466      4C656E20 
 466      3D202530 
 467 005d 000000   		.space	3
 468              	.LC10:
 469 0060 5363616E 		.ascii	"Scan Uarts Task\015\000"
 469      20556172 
 469      74732054 
 469      61736B0D 
 469      00
 470              		.section	.rodata.str1.4,"aMS",%progbits,1
 471              		.align	2
 472              	.LC0:
 473 0000 64656661 		.ascii	"defaultTask\000"
 473      756C7454 
 473      61736B00 
 474              		.section	.rodata.vApplicationIdleHook.str1.4,"aMS",%progbits,1
 475              		.align	2
 476              	.LC4:
 477 0000 49646C65 		.ascii	"Idle Hook Function\015\000"
 477      20486F6F 
 477      6B204675 
 477      6E637469 
 477      6F6E0D00 
 478              		.text
 479              	.Letext0:
 480              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 481              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 482              		.file 4 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h"
 483              		.file 5 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 484              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 485              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h"
 486              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 487              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 488              		.file 10 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\includ
 489              		.file 11 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\lib\\gcc\\arm-none-ea
 490              		.file 12 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\includ
 491              		.file 13 "Core/Inc/FreeRTOSConfig.h"
 492              		.file 14 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\includ
 493              		.file 15 "<built-in>"
ARM GAS  C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s 			page 15


DEFINED SYMBOLS
                            *ABS*:00000000 freertos.c
C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s:16     .text.StartDefaultTask:00000000 $t
C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s:23     .text.StartDefaultTask:00000000 StartDefaultTask
C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s:51     .text.StartDefaultTask:00000014 $d
C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s:56     .text.MX_FREERTOS_Init:00000000 $t
C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s:63     .text.MX_FREERTOS_Init:00000000 MX_FREERTOS_Init
C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s:125    .text.MX_FREERTOS_Init:0000004c $d
                            *COM*:00000004 xScanCoreBoardSemaphore
                            *COM*:00000004 xScanBSPABoardSemaphore
                            *COM*:00000004 xScanBSPBBoardSemaphore
                            *COM*:00000004 defaultTaskHandle
C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s:134    .text.vApplicationIdleHook:00000000 $t
C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s:141    .text.vApplicationIdleHook:00000000 vApplicationIdleHook
C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s:161    .text.vApplicationIdleHook:0000000c $d
C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s:166    .text.StartScanBSPATask:00000000 $t
C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s:173    .text.StartScanBSPATask:00000000 StartScanBSPATask
C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s:200    .text.StartScanBSPATask:00000014 $d
C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s:205    .text.StartScanBSPBTask:00000000 $t
C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s:212    .text.StartScanBSPBTask:00000000 StartScanBSPBTask
C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s:239    .text.StartScanBSPBTask:00000014 $d
C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s:244    .text.StartScanUsartsTask:00000000 $t
C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s:251    .text.StartScanUsartsTask:00000000 StartScanUsartsTask
C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s:411    .text.StartScanUsartsTask:000000d4 $d
                            *COM*:00000004 tReturn
                            *COM*:00000004 scanUartsTaskHandle
                            *COM*:00000004 scanBSPBTaskHandle
                            *COM*:00000004 scanBSPATaskHandle
C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s:436    .rodata:00000000 $d
C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s:446    .rodata.StartDefaultTask.str1.4:00000000 $d
C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s:450    .rodata.StartScanBSPATask.str1.4:00000000 $d
C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s:454    .rodata.StartScanBSPBTask.str1.4:00000000 $d
C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s:458    .rodata.StartScanUsartsTask.str1.4:00000000 $d
C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s:471    .rodata.str1.4:00000000 $d
C:\Users\bertz\AppData\Local\Temp\ccWPTU4N.s:475    .rodata.vApplicationIdleHook.str1.4:00000000 $d

UNDEFINED SYMBOLS
osDelay
puts
xQueueGenericCreate
osThreadCreate
vTaskDelay
xQueueGenericReceive
printf
memset
BSPABoardReceiveInfo
BSPABoardRx_InfoLen
BSPBBoardReceiveInfo
BSPBBoardRx_InfoLen
CoreBoardReceiveInfo
CoreBoardRx_InfoLen
